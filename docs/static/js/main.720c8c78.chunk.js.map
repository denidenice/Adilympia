{"version":3,"sources":["screen/components/ErrorScreen.tsx","screen/components/HomeScreen.tsx","screen/containers/HomeScreen.tsx","util/util.ts","screen/components/ScreenWrapper.tsx","app/components/AdilympicsToolbar.tsx","app/containers/AdilympicsToolbar.tsx","app/components/App.tsx","app/containers/App.tsx","store/index.ts","res/Olympic_rings_with_transparent_rims.svg","screen/actionTypes.ts","screen/index.ts","screen/actions.ts","theme/actionTypes.ts","theme/actions.ts","theme/model.ts","theme/defaults.ts","theme/components/ThemeSwitch.tsx","theme/containers/ThemeSwitch.tsx","theme/reducer.ts","theme/index.ts","registerServiceWorker.ts","install-material-ui-styles.ts","index.tsx","store/defaults.ts","screen/defaults.ts","screen/reducer.ts","store/store.ts","app/index.ts","app/reducer.ts"],"names":["useStyles","makeStyles","theme","root","display","gridTemplateColumns","gridTemplateRows","gridRowGap","concat","spacing","unit","justifyItems","alignItems","icon","fontSize","typography","h1","color","pink","title","palette","text","primary","message","secondary","ErrorScreen","_ref","classes","useTheme","react","className","react_fontawesome_index_es","faExclamationTriangle","core_index_es","variant","card","margin","height","width","cursor","cardTitle","cardContent","lightBlue","HomeScreen","cards","_useState","useState","_useState2","Object","slicedToArray","raisedCard","setRaisedCard","onMouseEnter","onMouseLeave","map","index","key","raised","onClick","connect","dispatch","ImmutableList","of","faDice","switchToEditGameScreen","faAlignLeft","switchToStatsScreen","faBook","switchToHistoryScreen","ScreenWrapper","screen","type","containers_HomeScreen","components_ErrorScreen","toolbar","paddingLeft","paddingRight","common","black","background","paper","toolbarCenter","position","pointerEvents","justifySelf","toolbarLeft","marginRight","toolbarRight","marginLeft","content","paddingTop","paddingBottom","backgroundImage","Logo","ThemedApp","_ref2","onHomeClick","children","CssBaseline_default","a","AppBar_default","Toolbar_default","AdilympicsToolbar_ToolbarLeft","AdilympicsToolbar_ToolbarCenter","AdilympicsToolbar_ToolbarRight","ToolbarLeft","_ref3","Home_default","ToolbarCenter","Typography_default","ToolbarRight","src_theme","AdilympicsToolbar","styles_index_es","AdilympicsToolbar_ThemedApp","state","ui","switchToHomeScreen","App","containers_AdilympicsToolbar","components_ScreenWrapper","_model__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","o","d","__webpack_exports__","_defaults__WEBPACK_IMPORTED_MODULE_1__","module","exports","p","SWITCH_SCREEN","_actions__WEBPACK_IMPORTED_MODULE_0__","_model__WEBPACK_IMPORTED_MODULE_1__","_defaults__WEBPACK_IMPORTED_MODULE_2__","_reducer__WEBPACK_IMPORTED_MODULE_3__","reducer","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","toggleTheme","props","MuiGrid","useNextVariants","lightTheme","createMuiTheme","darkTheme","defaultTheme","ThemeSwitch","onToggleTheme","WbSunny_default","index_es","checked","onChange","Brightness2_default","arguments","length","undefined","actions_toggleTheme","containers_ThemeSwitch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","install","store","createWorkbenchStore","ReactDOM","es","app","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","defaultAdilympicsState","_theme__WEBPACK_IMPORTED_MODULE_0__","_screen__WEBPACK_IMPORTED_MODULE_1__","defaultScreen","_defaults__WEBPACK_IMPORTED_MODULE_0__","_actionTypes__WEBPACK_IMPORTED_MODULE_1__","action","redux__WEBPACK_IMPORTED_MODULE_0__","redux_thunk__WEBPACK_IMPORTED_MODULE_1__","_app__WEBPACK_IMPORTED_MODULE_3__","middleware","applyMiddleware","thunk","createStore","rootReducer","_reducer__WEBPACK_IMPORTED_MODULE_1__","_containers_App__WEBPACK_IMPORTED_MODULE_2__","_store__WEBPACK_IMPORTED_MODULE_1__","_screen__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"static/js/main.720c8c78.chunk.js","sourcesContent":["import * as React from 'react'\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons'\nimport { makeStyles, useTheme } from '@material-ui/styles'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Theme, Typography } from '@material-ui/core'\nimport pink from '@material-ui/core/colors/pink'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'grid',\n        gridTemplateColumns: 'auto',\n        gridTemplateRows: '60% auto',\n        gridRowGap: `${2 * theme.spacing.unit}px`,\n        justifyItems: 'center',\n        alignItems: 'center'\n    },\n    icon: {\n        fontSize: theme.typography.h1.fontSize,\n        color: pink[800]\n    },\n    title: {\n        color: theme.palette.text.primary\n    },\n    message: {\n        color: theme.palette.text.secondary\n    }\n}))\n\ntype Props = Readonly<{\n    message: string\n}>\n\nconst ErrorScreen = ({ message }: Props) => {\n    const classes = useStyles(useTheme)\n    return (\n        <div className={classes.root}>\n            <FontAwesomeIcon className={classes.icon} icon={faExclamationTriangle} />\n            <Typography className={classes.title} variant=\"h3\">\n                Oops\n            </Typography>\n            <Typography className={classes.message} variant=\"body1\">\n                {message}\n            </Typography>\n        </div>\n    )\n}\n\nexport default ErrorScreen\n","import * as React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/styles'\nimport { Card, CardContent, Theme, Typography } from '@material-ui/core'\nimport { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { List as ImmutableList } from 'immutable'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\nimport {lightBlue} from \"@material-ui/core/es/colors\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'grid',\n        gridTemplateColumns: 'auto auto auto'\n    },\n    card: {\n        margin: theme.spacing.unit,\n        height: '60vh',\n        width: '30vw',\n        cursor: 'pointer'\n    },\n    cardTitle: {\n        color: theme.palette.text.primary\n    },\n    cardContent: {\n        display: 'grid',\n        height: '100%',\n        gridTemplateRows: '60% auto',\n        justifyItems: 'center',\n        alignItems: 'center'\n    },\n    icon: {\n        fontSize: theme.typography.h1.fontSize,\n        color: lightBlue[800]\n    }\n}))\n\nexport type CardConfig = Readonly<{\n    title: string\n    icon: IconProp\n    onClick: () => void\n}>\n\nexport type Props = Readonly<{\n    cards: ImmutableList<CardConfig>\n}>\n\ntype State = CardConfig | 'none'\n\nconst HomeScreen = ({ cards }: Props) => {\n    const classes = useStyles(useTheme)\n    const [raisedCard, setRaisedCard] = useState<State>('none')\n    const onMouseEnter = (card: CardConfig) => () => setRaisedCard(card)\n    const onMouseLeave = () => setRaisedCard('none')\n    return (\n        <div className={classes.root}>\n            {cards.map((card: CardConfig, index: number) => {\n                return (\n                    <div key={index}>\n                        <Card className={classes.card} raised={raisedCard === card}>\n                            <CardContent\n                                className={classes.cardContent}\n                                onClick={card.onClick}\n                                onMouseEnter={onMouseEnter(card)}\n                                onMouseLeave={onMouseLeave}\n                            >\n                                <FontAwesomeIcon className={classes.icon} icon={card.icon} />\n                                <Typography className={classes.cardTitle} variant=\"h3\">\n                                    {card.title}\n                                </Typography>\n                            </CardContent>\n                        </Card>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default HomeScreen\n","import { connect } from 'react-redux'\nimport HomeScreen, { Props } from '../components/HomeScreen'\nimport { List as ImmutableList } from 'immutable'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ScreenAction, switchToHistoryScreen, switchToStatsScreen, switchToEditGameScreen } from '../actions'\nimport { AdilympicsScreen } from '../model'\nimport { noOp } from '../../util'\nimport { faDice, faAlignLeft, faBook } from '@fortawesome/free-solid-svg-icons'\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AdilympicsScreen, {}, ScreenAction>): Props => {\n    const cards = ImmutableList.of(\n        {\n            title: 'New Gameseries',\n            icon: faDice,\n            onClick: () => dispatch(switchToEditGameScreen())\n        },\n        {\n            title: 'Stats',\n            icon: faAlignLeft,\n            onClick: () => dispatch(switchToStatsScreen())\n        },    {\n            title: 'History',\n            icon: faBook,\n            onClick: () => dispatch(switchToHistoryScreen())\n        }\n    )\n    return {\n        cards\n    }\n}\n\nexport default connect(\n    noOp,\n    mapDispatchToProps\n)(HomeScreen)\n","export const noOp = () => {\n    /* no-op */\n}\n\n/**\n * Convenience method to join multiple class names.\n *\n * Example Usage:\n *\n * `cn('foo', 'bar', 'baz')`\n * `cn(...['foo', 'bar', 'baz'])`\n *\n */\nexport const cn = (...classNames: string[]) => classNames.join(' ')\n","import { AdilympicsScreen } from '../model'\nimport * as React from 'react'\nimport ErrorScreen from './ErrorScreen'\nimport HomeScreen from '../containers/HomeScreen'\n\ntype Props = Readonly<{\n    screen: AdilympicsScreen\n}>\n\nconst ScreenWrapper = ({ screen }: Props) => {\n    switch (screen.type) {\n        case 'home':\n            return <HomeScreen />\n        case 'error':\n            return <ErrorScreen message={screen.message} />\n        default:\n            return <ErrorScreen message={'Missing screen implementation'} />\n    }\n}\n\nexport default ScreenWrapper\n","import * as React from 'react'\nimport { ReactNode } from 'react'\n\nimport AppBar from '@material-ui/core/AppBar/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar'\nimport { IconButton, Theme } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline/CssBaseline'\nimport Typography from '@material-ui/core/Typography/Typography'\nimport { ThemeSwitch } from '../../theme'\nimport { makeStyles, ThemeProvider, useTheme } from '@material-ui/styles'\nimport HomeIcon from '@material-ui/icons/Home'\nimport Logo from '../../res/Olympic_rings_with_transparent_rims.svg';\n\n\nconst pagePadding = 8\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    toolbar: {\n        display: 'grid',\n        gridTemplateColumns: 'auto auto', // left/right (center is not part of flow)\n        paddingLeft: pagePadding,\n        paddingRight: pagePadding,\n        color: theme.palette.common.black,\n        background: theme.palette.background.paper\n    },\n    toolbarCenter: {\n        // position centered on page (rather than in flow of toolbar items)\n        position: 'absolute',\n        width: '100%',\n        display: 'grid',\n        pointerEvents: 'none',\n    },\n    title: {\n        justifySelf: 'center',\n        color: theme.palette.text.primary\n    },\n    toolbarLeft: {\n        height: '100%',\n        marginRight: 'auto', // push to the left\n        display: 'grid',\n        gridTemplateColumns: 'auto',\n        alignItems: 'center'\n    },\n    toolbarRight: {\n        height: '100%',\n        marginLeft: 'auto', // push to the right\n        display: 'grid',\n        gridTemplateColumns: 'auto auto',\n        alignItems: 'center'\n    },\n    content: {\n        height: '100vh',\n        width: '100vw',\n        paddingTop: 64 + pagePadding + 'px', // account for toolbar height\n        paddingLeft: pagePadding,\n        paddingRight: pagePadding,\n        paddingBottom: pagePadding,\n        display: 'grid',\n        alignItems: 'center',\n        backgroundImage: `url(${Logo})`\n    }\n}))\n\nexport type Props = Readonly<{\n    theme: Theme\n}> &\n    ThemedAppProps\n\nconst AdilympicsToolbar = ({ theme, onHomeClick, children }: Props) => {\n    return (\n        // This is the only place we need to access the theme via our own model\n        // From here on, it is safe and convenient to use the `useTheme` hook\n        <ThemeProvider theme={theme}>\n            <ThemedApp children={children} onHomeClick={onHomeClick} />\n        </ThemeProvider>\n    )\n}\n\ntype ThemedAppProps = Readonly<{\n    onHomeClick: () => void\n    children?: ReactNode\n}>\n\nconst ThemedApp = ({ onHomeClick, children }: ThemedAppProps) => {\n    const classes = useStyles(useTheme)\n    return (\n        <div>\n            <CssBaseline />\n            <AppBar>\n                <Toolbar className={classes.toolbar}>\n                    <ToolbarLeft onHomeClick={onHomeClick} />\n                    <ToolbarCenter />\n                    <ToolbarRight />\n                </Toolbar>\n            </AppBar>\n            <div className={classes.content}>{children}</div>\n        </div>\n    )\n}\n\nconst ToolbarLeft = ({ onHomeClick }: Pick<Props, 'onHomeClick'>) => {\n    const classes = useStyles(useTheme)\n    return (\n        <div className={classes.toolbarLeft}>\n            <IconButton color=\"inherit\" onClick={onHomeClick}>\n              <HomeIcon onClick={onHomeClick}/>\n            </IconButton>\n        </div>\n    )\n}\n\nconst ToolbarCenter = () => {\n    const classes = useStyles(useTheme)\n    return (\n        <div className={classes.toolbarCenter}>\n            <Typography className={classes.title} variant=\"h6\">\n                 Adilympia\n            </Typography>\n        </div>\n\n    )\n}\n\nconst ToolbarRight = () => {\n    const classes = useStyles(useTheme)\n    return (\n        <div className={classes.toolbarRight}>\n            <ThemeSwitch />\n        </div>\n    )\n}\n\nexport default AdilympicsToolbar\n","import { connect, Omit } from 'react-redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { ScreenAction, switchToHomeScreen, AdilympicsScreen } from '../../screen'\nimport AdilympicsToolbar, { Props } from '../components/AdilympicsToolbar'\nimport { AdilympicsState } from '../../store'\n\ntype FromStateProps = Omit<Props, 'onHomeClick'>\ntype FromDispatchProps = Omit<Props, 'theme'>\n\nconst mapStateToProps = (state: AdilympicsState): FromStateProps => {\n    return {\n        theme: state.ui.theme\n    }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<AdilympicsScreen, {}, ScreenAction>): FromDispatchProps => {\n    return {\n        onHomeClick: () => dispatch(switchToHomeScreen())\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AdilympicsToolbar)\n","import * as React from 'react'\nimport { Theme } from '@material-ui/core'\nimport { AdilympicsScreen } from '../../screen'\nimport ScreenWrapper from '../../screen/components/ScreenWrapper'\nimport AdilympicsToolbar from '../containers/AdilympicsToolbar'\n\n\nexport type Props = Readonly<{\n    theme: Theme\n    screen: AdilympicsScreen\n}>\n\nconst App = ({ theme, screen }: Props) => {\n    return (\n        <AdilympicsToolbar>\n            <ScreenWrapper screen={screen} />\n        </AdilympicsToolbar>\n    )\n}\n\nexport default App\n","import { connect } from 'react-redux'\nimport { AdilympicsState } from '../../store'\nimport App, { Props } from '../components/App'\n\nconst mapStateToProps = (state: AdilympicsState): Props => {\n    return state.ui\n}\n\nexport default connect(mapStateToProps)(App)\n","export * from './model'\nexport * from './defaults'\nexport * from './store'\n","module.exports = __webpack_public_path__ + \"static/media/Olympic_rings_with_transparent_rims.e72b111a.svg\";","export const SWITCH_SCREEN = 'screen/SWITCH_SCREEN'\n","export * from './actions'\nexport * from './model'\nexport * from './defaults'\nexport * from './reducer'\nimport reducer from './reducer'\nexport default reducer\n","import { SWITCH_SCREEN } from './actionTypes'\nimport { AdilympicsScreen } from './model'\n\nexport type ScreenAction = SwitchScreenAction\n\nexport type SwitchScreenAction = Readonly<{\n    type: typeof SWITCH_SCREEN\n    screen: AdilympicsScreen\n}>\n\nexport const switchToHomeScreen = (): SwitchScreenAction => {\n    return {\n        type: SWITCH_SCREEN,\n        screen: {\n            type: 'home'\n        }\n    }\n}\n\nexport const switchToEditGameScreen = (): SwitchScreenAction => {\n    return {\n        type: SWITCH_SCREEN,\n        screen: {\n            type: 'game'\n        }\n    }\n}\n\nexport const switchToHistoryScreen = (): SwitchScreenAction => {\n    return {\n        type: SWITCH_SCREEN,\n        screen: {\n            type: 'history'\n        }\n    }\n}\n\nexport const switchToStatsScreen = (): SwitchScreenAction => {\n    return {\n        type: SWITCH_SCREEN,\n        screen: {\n            type: 'stats'\n        }\n    }\n}\n","export const TOGGLE_THEME = 'theme/TOGGLE_THEME'\n","import { TOGGLE_THEME } from './actionTypes'\n\nexport type ThemeAction = ToggleThemeAction\n\nexport type ToggleThemeAction = Readonly<{\n    type: typeof TOGGLE_THEME\n}>\n\nexport const toggleTheme = (): ToggleThemeAction => {\n    return {\n        type: TOGGLE_THEME\n    }\n}\n","import createMuiTheme, { Theme } from '@material-ui/core/styles/createMuiTheme'\nimport { ComponentsProps } from '@material-ui/core/styles/props'\nimport { TypographyOptions } from '@material-ui/core/styles/createTypography'\n\nconst props: ComponentsProps = {\n    MuiGrid: {\n        spacing: 8\n    }\n}\n\nconst typography: TypographyOptions = {\n    useNextVariants: true\n}\n\nexport const lightTheme: Theme = createMuiTheme({\n    palette: {\n        type: 'light'\n    },\n    props,\n    typography\n})\n\nexport const darkTheme: Theme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    },\n    props,\n    typography\n})\n\n\n\n","import { Theme } from '@material-ui/core'\nimport {darkTheme, lightTheme} from './model'\n\nexport const defaultTheme: Theme = lightTheme\n","import DarkThemeIcon from '@material-ui/icons/Brightness2'\nimport LightThemeIcon from '@material-ui/icons/WbSunny'\nimport * as React from 'react'\nimport { Switch, Theme } from '@material-ui/core'\nimport { darkTheme } from '../model'\nimport { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'grid',\n        gridTemplateColumns: 'auto 1fr auto',\n        alignItems: 'center'\n    },\n    icon: {\n        margin: theme.spacing.unit\n    }\n}))\n\ntype Props = Readonly<{\n    theme: Theme\n    onToggleTheme: () => void\n}>\n\nconst ThemeSwitch = ({ theme, onToggleTheme }: Props) => {\n    const classes = useStyles(theme)\n    return (\n        <div className={classes.root}>\n            <LightThemeIcon className={classes.icon} />\n            <Switch checked={theme === darkTheme} onChange={onToggleTheme} color={'default'} />\n            <DarkThemeIcon className={classes.icon} />\n        </div>\n    )\n}\n\nexport default ThemeSwitch\n","import { ThunkDispatch } from 'redux-thunk'\nimport { connect } from 'react-redux'\nimport ThemeSwitch from '../components/ThemeSwitch'\nimport { Theme } from '@material-ui/core'\nimport { ThemeAction } from '../actions'\nimport { toggleTheme } from '../index'\nimport { AdilympicsState } from '../../store'\n\ntype FromStateProps = Readonly<{\n    theme: Theme\n}>\n\ntype FromDispatchProps = Readonly<{\n    onToggleTheme: () => void\n}>\n\nconst mapStateToProps = (state: AdilympicsState): FromStateProps => {\n    return { theme: state.ui.theme }\n}\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<Theme, {}, ThemeAction>): FromDispatchProps => {\n    return {\n        onToggleTheme: () => dispatch(toggleTheme())\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ThemeSwitch)\n","import { Theme } from '@material-ui/core'\nimport { ThemeAction } from './actions'\nimport { TOGGLE_THEME } from './actionTypes'\nimport { darkTheme, lightTheme } from './model'\nimport { defaultTheme } from './defaults'\n\nconst reducer = (state: Theme = defaultTheme, action: ThemeAction): Theme => {\n    switch (action.type) {\n        case TOGGLE_THEME:\n            return state.palette.type === 'light' ? darkTheme : lightTheme\n        default:\n            return state\n    }\n}\n\nexport default reducer\n","export * from './actions'\nexport * from './model'\nexport * from './defaults'\nexport { default as ThemeSwitch } from './containers/ThemeSwitch'\nexport * from './reducer'\nimport reducer from './reducer'\nexport default reducer\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and allUsers)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString())\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    )\n                })\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log('New content is available; please refresh.')\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log('Content is cached for offline use.')\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. Root is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import { install } from '@material-ui/styles'\n\n// https://material-ui.com/css-in-js/basics\ninstall()\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport registerServiceWorker from './registerServiceWorker'\nimport './install-material-ui-styles'\nimport { Provider } from 'react-redux'\nimport { App } from './app'\nimport createWorkbenchStore from './store/store'\n\n/* ·················································································································· */\n/*  Redux Store                                                                                                       */\n/* ·················································································································· */\n\nconst store = createWorkbenchStore()\n\n/* ·················································································································· */\n/*  Main Render                                                                                                       */\n/* ·················································································································· */\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n)\n\nregisterServiceWorker()\n","import { AdilympicsState } from './model'\nimport {defaultTheme} from '../theme'\nimport { defaultScreen } from '../screen'\n\nexport const defaultAdilympicsState: AdilympicsState = {\n    ui: {\n        theme: defaultTheme,\n        screen: defaultScreen\n    }\n}\n","import { AdilympicsScreen } from './model'\n\nexport const defaultScreen: AdilympicsScreen = { type: 'home' }\n","import { AdilympicsScreen } from './model'\nimport { defaultScreen } from './defaults'\nimport { ScreenAction } from './actions'\nimport { SWITCH_SCREEN } from './actionTypes'\n\nconst reducer = (screen: AdilympicsScreen = defaultScreen, action: ScreenAction): AdilympicsScreen => {\n    switch (action.type) {\n        case SWITCH_SCREEN: {\n            return action.screen\n        }\n        default:\n            return screen\n    }\n}\n\nexport default reducer\n","import { applyMiddleware, createStore, Store } from 'redux'\nimport thunk from 'redux-thunk'\nimport { AdilympicsState } from './model'\nimport { defaultAdilympicsState } from './defaults'\nimport { rootReducer, WorkbenchAction } from '../app'\n\nconst createWorkbenchStore = (): Store<AdilympicsState, WorkbenchAction> => {\n    const middleware = applyMiddleware(thunk)\n    return createStore(rootReducer, defaultAdilympicsState, middleware)\n}\n\nexport default createWorkbenchStore\n","export * from './actions'\nexport * from './reducer'\nexport { default as App } from './containers/App'\n","import theme, { ThemeAction } from '../theme'\nimport { defaultAdilympicsState, AdilympicsState } from '../store'\nimport { WorkbenchAction } from './actions'\nimport screen, { ScreenAction } from '../screen'\n\nexport const rootReducer = (state: AdilympicsState = defaultAdilympicsState, action: WorkbenchAction): AdilympicsState => {\n    return {\n        ui: {\n            theme: theme(state.ui.theme, action as ThemeAction),\n            screen: screen(state.ui.screen, action as ScreenAction)\n        }\n    }\n}\n"],"sourceRoot":""}